import {
  Alert,
  AspectImage,
  AspectRatio,
  Avatar,
  Badge,
  Box$1,
  Button,
  Card,
  Checkbox,
  Close,
  CloseIcon,
  Container,
  Divider,
  Donut,
  Embed,
  Field,
  Flex,
  Grid,
  Heading,
  IconButton,
  Image,
  Input,
  Label,
  Link,
  MenuButton,
  MenuIcon,
  Message,
  NavLink,
  Paragraph,
  Progress,
  Radio,
  Select,
  Slider,
  Spinner,
  Switch,
  Text,
  Textarea,
  __isBoxStyledSystemProp,
  css,
  get
} from "./chunk-TFJTC4OP.js";
import {
  Global,
  ThemeContext,
  jsx
} from "./chunk-CYAK5BZ7.js";
import "./chunk-ERFFFWEW.js";
import {
  require_react
} from "./chunk-NTFE6N72.js";
import "./chunk-6SGCV3RH.js";
import {
  __commonJS,
  __toESM
} from "./chunk-TWLJ45QX.js";

// node_modules/deepmerge/dist/cjs.js
var require_cjs = __commonJS({
  "node_modules/deepmerge/dist/cjs.js"(exports, module) {
    "use strict";
    var isMergeableObject2 = function isMergeableObject3(value) {
      return isNonNullObject(value) && !isSpecial(value);
    };
    function isNonNullObject(value) {
      return !!value && typeof value === "object";
    }
    function isSpecial(value) {
      var stringValue = Object.prototype.toString.call(value);
      return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
    }
    var canUseSymbol2 = typeof Symbol === "function" && Symbol.for;
    var REACT_ELEMENT_TYPE = canUseSymbol2 ? Symbol.for("react.element") : 60103;
    function isReactElement(value) {
      return value.$$typeof === REACT_ELEMENT_TYPE;
    }
    function emptyTarget(val) {
      return Array.isArray(val) ? [] : {};
    }
    function cloneUnlessOtherwiseSpecified(value, options) {
      return options.clone !== false && options.isMergeableObject(value) ? deepmerge2(emptyTarget(value), value, options) : value;
    }
    function defaultArrayMerge(target, source, options) {
      return target.concat(source).map(function(element) {
        return cloneUnlessOtherwiseSpecified(element, options);
      });
    }
    function getMergeFunction(key, options) {
      if (!options.customMerge) {
        return deepmerge2;
      }
      var customMerge = options.customMerge(key);
      return typeof customMerge === "function" ? customMerge : deepmerge2;
    }
    function getEnumerableOwnPropertySymbols(target) {
      return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
        return target.propertyIsEnumerable(symbol);
      }) : [];
    }
    function getKeys(target) {
      return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
    }
    function propertyIsOnObject(object, property) {
      try {
        return property in object;
      } catch (_) {
        return false;
      }
    }
    function propertyIsUnsafe(target, key) {
      return propertyIsOnObject(target, key) && !(Object.hasOwnProperty.call(target, key) && Object.propertyIsEnumerable.call(target, key));
    }
    function mergeObject(target, source, options) {
      var destination = {};
      if (options.isMergeableObject(target)) {
        getKeys(target).forEach(function(key) {
          destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
        });
      }
      getKeys(source).forEach(function(key) {
        if (propertyIsUnsafe(target, key)) {
          return;
        }
        if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
          destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
        } else {
          destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
        }
      });
      return destination;
    }
    function deepmerge2(target, source, options) {
      options = options || {};
      options.arrayMerge = options.arrayMerge || defaultArrayMerge;
      options.isMergeableObject = options.isMergeableObject || isMergeableObject2;
      options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
      var sourceIsArray = Array.isArray(source);
      var targetIsArray = Array.isArray(target);
      var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
      if (!sourceAndTargetTypesMatch) {
        return cloneUnlessOtherwiseSpecified(source, options);
      } else if (sourceIsArray) {
        return options.arrayMerge(target, source, options);
      } else {
        return mergeObject(target, source, options);
      }
    }
    deepmerge2.all = function deepmergeAll(array, options) {
      if (!Array.isArray(array)) {
        throw new Error("first argument should be an array");
      }
      return array.reduce(function(prev, next) {
        return deepmerge2(prev, next, options);
      }, {});
    };
    var deepmerge_1 = deepmerge2;
    module.exports = deepmerge_1;
  }
});

// node_modules/@theme-ui/core/dist/theme-ui-core.esm.js
var React = __toESM(require_react());
var import_deepmerge = __toESM(require_cjs());

// node_modules/@emotion/react/package.json
var package_default = {
  name: "@emotion/react",
  version: "11.10.4",
  main: "dist/emotion-react.cjs.js",
  module: "dist/emotion-react.esm.js",
  browser: {
    "./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
  },
  exports: {
    ".": {
      module: {
        worker: "./dist/emotion-react.worker.esm.js",
        browser: "./dist/emotion-react.browser.esm.js",
        default: "./dist/emotion-react.esm.js"
      },
      default: "./dist/emotion-react.cjs.js"
    },
    "./jsx-runtime": {
      module: {
        worker: "./jsx-runtime/dist/emotion-react-jsx-runtime.worker.esm.js",
        browser: "./jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js",
        default: "./jsx-runtime/dist/emotion-react-jsx-runtime.esm.js"
      },
      default: "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.js"
    },
    "./_isolated-hnrs": {
      module: {
        worker: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.worker.esm.js",
        browser: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js",
        default: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.esm.js"
      },
      default: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.js"
    },
    "./jsx-dev-runtime": {
      module: {
        worker: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.worker.esm.js",
        browser: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js",
        default: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.esm.js"
      },
      default: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.js"
    },
    "./package.json": "./package.json",
    "./types/css-prop": "./types/css-prop.d.ts",
    "./macro": "./macro.js"
  },
  types: "types/index.d.ts",
  files: [
    "src",
    "dist",
    "jsx-runtime",
    "jsx-dev-runtime",
    "_isolated-hnrs",
    "types/*.d.ts",
    "macro.js",
    "macro.d.ts",
    "macro.js.flow"
  ],
  sideEffects: false,
  author: "Emotion Contributors",
  license: "MIT",
  scripts: {
    "test:typescript": "dtslint types"
  },
  dependencies: {
    "@babel/runtime": "^7.18.3",
    "@emotion/babel-plugin": "^11.10.0",
    "@emotion/cache": "^11.10.0",
    "@emotion/serialize": "^1.1.0",
    "@emotion/use-insertion-effect-with-fallbacks": "^1.0.0",
    "@emotion/utils": "^1.2.0",
    "@emotion/weak-memoize": "^0.3.0",
    "hoist-non-react-statics": "^3.3.1"
  },
  peerDependencies: {
    "@babel/core": "^7.0.0",
    react: ">=16.8.0"
  },
  peerDependenciesMeta: {
    "@babel/core": {
      optional: true
    },
    "@types/react": {
      optional: true
    }
  },
  devDependencies: {
    "@babel/core": "^7.18.5",
    "@definitelytyped/dtslint": "0.0.112",
    "@emotion/css": "11.10.0",
    "@emotion/css-prettifier": "1.1.0",
    "@emotion/server": "11.10.0",
    "@emotion/styled": "11.10.4",
    "html-tag-names": "^1.1.2",
    react: "16.14.0",
    "svg-tag-names": "^1.1.1",
    typescript: "^4.5.5"
  },
  repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
  publishConfig: {
    access: "public"
  },
  "umd:main": "dist/emotion-react.umd.min.js",
  preconstruct: {
    entrypoints: [
      "./index.js",
      "./jsx-runtime.js",
      "./jsx-dev-runtime.js",
      "./_isolated-hnrs.js"
    ],
    umdName: "emotionReact",
    exports: {
      envConditions: [
        "browser",
        "worker"
      ],
      extra: {
        "./types/css-prop": "./types/css-prop.d.ts",
        "./macro": "./macro.js"
      }
    }
  }
};

// node_modules/@theme-ui/core/dist/parseProps-376f43a7.esm.js
var getCSS = function getCSS2(props) {
  return function(theme) {
    var styles = css(props.sx)(theme);
    var raw = typeof props.css === "function" ? props.css(theme) : props.css;
    return [styles, raw];
  };
};
function parseProps(props) {
  if (!props || !props.sx && !props.css)
    return props;
  var next = {};
  for (var key in props) {
    if (key === "sx")
      continue;
    next[key] = props[key];
  }
  next.css = getCSS(props);
  return next;
}

// node_modules/@theme-ui/core/dist/theme-ui-core.esm.js
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var __EMOTION_VERSION__ = package_default.version;
var jsx2 = function jsx3(type, props) {
  for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    children[_key - 2] = arguments[_key];
  }
  return jsx.apply(void 0, [type, parseProps(props)].concat(children));
};
var createElement = jsx2;
var __themeUiDefaultContextValue = {
  __EMOTION_VERSION__,
  theme: {}
};
var __ThemeUIContext = React.createContext(__themeUiDefaultContextValue);
var useThemeUI = function useThemeUI2() {
  return React.useContext(__ThemeUIContext);
};
var canUseSymbol = typeof Symbol === "function" && Symbol.for;
var REACT_ELEMENT = canUseSymbol ? Symbol.for("react.element") : 60103;
var FORWARD_REF = canUseSymbol ? Symbol.for("react.forward_ref") : 60103;
var deepmergeOptions = {
  isMergeableObject: function isMergeableObject(n) {
    return !!n && typeof n === "object" && n.$$typeof !== REACT_ELEMENT && n.$$typeof !== FORWARD_REF;
  },
  arrayMerge: function arrayMerge(_leftArray, rightArray) {
    return rightArray;
  }
};
var merge = function merge2(a, b) {
  return (0, import_deepmerge.default)(a, b, deepmergeOptions);
};
function mergeAll() {
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }
  return import_deepmerge.default.all(args, deepmergeOptions);
}
merge.all = mergeAll;
var __ThemeUIInternalBaseThemeProvider = function __ThemeUIInternalBaseThemeProvider2(_ref) {
  var context = _ref.context, children = _ref.children;
  return jsx2(ThemeContext.Provider, {
    value: context.theme
  }, jsx2(__ThemeUIContext.Provider, {
    value: context,
    children
  }));
};
function ThemeProvider(_ref2) {
  var theme = _ref2.theme, children = _ref2.children;
  var outer = useThemeUI();
  if (true) {
    if (outer.__EMOTION_VERSION__ !== __EMOTION_VERSION__) {
      console.warn("Multiple versions of Emotion detected,", "and theming might not work as expected.", "Please ensure there is only one copy of @emotion/react installed in your application.");
    }
  }
  var context = typeof theme === "function" ? _extends({}, outer, {
    theme: theme(outer.theme)
  }) : merge.all({}, outer, {
    theme
  });
  return jsx2(__ThemeUIInternalBaseThemeProvider, {
    context,
    children
  });
}

// node_modules/@theme-ui/color-modes/dist/theme-ui-color-modes.esm.js
var import_react2 = __toESM(require_react());
function _extends2() {
  _extends2 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
var toVarName = function toVarName2(key) {
  return "--theme-ui-" + key.replace("-__default", "");
};
var toVarValue = function toVarValue2(key) {
  return "var(" + toVarName(key) + ")";
};
var join = function join2() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return args.filter(Boolean).join("-");
};
var reservedKeys = /* @__PURE__ */ new Set(["useCustomProperties", "initialColorModeName", "printColorModeName", "initialColorMode", "useLocalStorage", "config"]);
var toCustomProperties = function toCustomProperties2(obj, parent) {
  var next = Array.isArray(obj) ? [] : {};
  for (var key in obj) {
    var value = obj[key];
    var name = join(parent, key);
    if (value && typeof value === "object") {
      next[key] = toCustomProperties2(value, name);
      continue;
    }
    if (reservedKeys.has(key)) {
      next[key] = value;
      continue;
    }
    next[key] = toVarValue(name);
  }
  return next;
};
var __objectToVars = function __objectToVars2(parent, obj) {
  var vars = {};
  for (var key in obj) {
    if (key === "modes")
      continue;
    var name = join(parent, key);
    var value = obj[key];
    if (value && typeof value === "object") {
      vars = _extends2({}, vars, __objectToVars2(name, value));
    } else {
      vars[toVarName(name)] = value;
    }
  }
  return vars;
};
var __createColorStyles = function __createColorStyles2(theme) {
  if (theme === void 0) {
    theme = {};
  }
  var _ref = theme.config || theme || {}, useCustomProperties = _ref.useCustomProperties, initialColorModeName = _ref.initialColorModeName, printColorModeName = _ref.printColorModeName, useRootStyles = _ref.useRootStyles;
  var colors = theme.rawColors || theme.colors;
  if (!colors || useRootStyles === false)
    return {};
  if (useCustomProperties === false) {
    return css({
      color: "text",
      bg: "background"
    })(theme);
  }
  var modes = colors.modes || {};
  var styles = __createColorProperties(colors, modes);
  if (printColorModeName) {
    var printMode = modes[printColorModeName];
    if (!printMode && printColorModeName === initialColorModeName)
      printMode = colors;
    if (printMode) {
      styles["@media print"] = __objectToVars("colors", printMode);
    } else {
      console.error("Theme UI `printColorModeName` was not found in colors scale", {
        colors,
        printColorModeName
      });
    }
  }
  var colorToVarValue = function colorToVarValue2(color) {
    return toVarValue("colors-" + color);
  };
  return css(_extends2({}, styles, {
    color: colorToVarValue("text"),
    bg: colorToVarValue("background")
  }))(theme);
};
function __createColorProperties(colors, modes) {
  var styles = __objectToVars("colors", colors);
  Object.keys(modes).forEach(function(mode) {
    var className = ".theme-ui-" + mode;
    var key = "&" + className + ", " + className + " &";
    styles[key] = __objectToVars("colors", modes[mode]);
  });
  return styles;
}
var STORAGE_KEY = "theme-ui-color-mode";
var DARK_QUERY = "(prefers-color-scheme: dark)";
var LIGHT_QUERY = "(prefers-color-scheme: light)";
var storage = {
  get: function get2() {
    try {
      return window.localStorage.getItem(STORAGE_KEY);
    } catch (err) {
      console.warn("localStorage is disabled and color mode might not work as expected.", "Please check your Site Settings.", err);
    }
  },
  set: function set(value) {
    try {
      window.localStorage.setItem(STORAGE_KEY, value);
    } catch (err) {
      console.warn("localStorage is disabled and color mode might not work as expected.", "Please check your Site Settings.", err);
    }
  }
};
var getPreferredColorScheme = function getPreferredColorScheme2() {
  if (typeof window !== "undefined" && window.matchMedia) {
    if (window.matchMedia(DARK_QUERY).matches) {
      return "dark";
    }
    if (window.matchMedia(LIGHT_QUERY).matches) {
      return "light";
    }
  }
  return null;
};
var useClientsideEffect = typeof window === "undefined" ? function() {
} : import_react2.useLayoutEffect;
var TopLevelColorModeProvider = function TopLevelColorModeProvider2(_ref) {
  var outerCtx = _ref.outerCtx, children = _ref.children;
  var outerTheme = outerCtx.theme || {};
  var _ref2 = outerTheme.config || outerTheme, initialColorModeName = _ref2.initialColorModeName, useColorSchemeMediaQuery = _ref2.useColorSchemeMediaQuery, useLocalStorage = _ref2.useLocalStorage;
  var _useState = (0, import_react2.useState)(function() {
    var preferredMode = useColorSchemeMediaQuery !== false && getPreferredColorScheme();
    return preferredMode || initialColorModeName;
  }), colorMode = _useState[0], setColorMode = _useState[1];
  useClientsideEffect(function() {
    var stored = useLocalStorage !== false && storage.get();
    if (typeof document !== "undefined") {
      document.documentElement.classList.remove("theme-ui-" + stored);
    }
    if (useColorSchemeMediaQuery !== "system" && stored && stored !== colorMode) {
      colorMode = stored;
      setColorMode(stored);
    }
  }, []);
  (0, import_react2.useEffect)(function() {
    if (colorMode && useLocalStorage !== false) {
      storage.set(colorMode);
    }
  }, [colorMode, useLocalStorage]);
  var setPreferredColorScheme = (0, import_react2.useCallback)(function() {
    var preferredColorScheme = getPreferredColorScheme();
    setColorMode(preferredColorScheme || initialColorModeName);
  }, [initialColorModeName]);
  (0, import_react2.useEffect)(function() {
    if (useColorSchemeMediaQuery === "system" && window.matchMedia) {
      var darkMQL = window.matchMedia(DARK_QUERY);
      if (typeof darkMQL.addEventListener === "function") {
        darkMQL.addEventListener("change", setPreferredColorScheme);
      } else if (typeof darkMQL.addListener === "function") {
        darkMQL.addListener(setPreferredColorScheme);
      }
    }
    return function() {
      if (useColorSchemeMediaQuery === "system" && window.matchMedia) {
        var _darkMQL = window.matchMedia(DARK_QUERY);
        if (typeof _darkMQL.removeEventListener === "function") {
          _darkMQL.removeEventListener("change", setPreferredColorScheme);
        } else if (typeof _darkMQL.removeListener === "function") {
          _darkMQL.removeListener(setPreferredColorScheme);
        }
      }
    };
  }, [useColorSchemeMediaQuery, setPreferredColorScheme]);
  if (true) {
    var _outerTheme$colors, _outerTheme$colors2;
    if ((_outerTheme$colors = outerTheme.colors) != null && _outerTheme$colors.modes && initialColorModeName && Object.keys(outerTheme.colors.modes).indexOf(initialColorModeName) > -1) {
      console.warn("[theme-ui] The `initialColorModeName` value should be a unique name and cannot reference a key in `theme.colors.modes`.");
    }
    var allColorKeys = [];
    var flattenKeys = function flattenKeys2(obj) {
      Object.keys(obj).forEach(function(key) {
        allColorKeys.push(key);
        if (typeof obj[key] === "object") {
          flattenKeys2(obj[key]);
        }
      });
      return allColorKeys;
    };
    flattenKeys((_outerTheme$colors2 = outerTheme.colors) != null ? _outerTheme$colors2 : {}).forEach(function(color) {
      if (color !== color.trim()) {
        console.warn("[theme-ui] Key `" + color + "` in theme.colors contains leading/trailing whitespace, which can cause bugs in your project.");
      }
    });
  }
  var newTheme = useThemeWithAppliedColorMode({
    colorMode,
    outerTheme
  });
  var newCtx = _extends2({}, outerCtx, {
    theme: newTheme,
    colorMode,
    setColorMode
  });
  return import_react2.default.createElement(__ThemeUIInternalBaseThemeProvider, {
    context: newCtx
  }, import_react2.default.createElement(GlobalColorStyles, {
    theme: newTheme
  }), children);
};
function useColorMode() {
  var _useThemeUI = useThemeUI(), colorMode = _useThemeUI.colorMode, setColorMode = _useThemeUI.setColorMode;
  if (typeof setColorMode !== "function") {
    throw new Error("[useColorMode] requires the ColorModeProvider component");
  }
  return [colorMode, setColorMode];
}
var omitModes = function omitModes2(colors) {
  var res = _extends2({}, colors);
  delete res.modes;
  return res;
};
function copyRawColors(colors, outerThemeRawColors) {
  for (var _i = 0, _Object$entries = Object.entries(colors); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = _Object$entries[_i], key = _Object$entries$_i[0], value = _Object$entries$_i[1];
    if (typeof value === "string" && !value.startsWith("var(")) {
      outerThemeRawColors[key] = value;
    } else if (typeof value === "object") {
      var newValue = _extends2({}, outerThemeRawColors[key]);
      copyRawColors(value, newValue);
      outerThemeRawColors[key] = newValue;
    }
  }
}
function useThemeWithAppliedColorMode(_ref3) {
  var outerTheme = _ref3.outerTheme, colorMode = _ref3.colorMode;
  var theme = (0, import_react2.useMemo)(function() {
    var res = _extends2({}, outerTheme);
    var modes = get(res, "colors.modes", {});
    var currentColorMode = get(modes, colorMode, {});
    if (colorMode) {
      res.colors = _extends2({}, res.colors, currentColorMode);
    }
    var _ref4 = outerTheme.config || outerTheme, useCustomProperties = _ref4.useCustomProperties, _ref4$initialColorMod = _ref4.initialColorModeName, initialColorModeName = _ref4$initialColorMod === void 0 ? "__default" : _ref4$initialColorMod;
    var outerThemeRawColors = outerTheme.rawColors || outerTheme.colors || {};
    if (useCustomProperties !== false) {
      var alreadyHasRawColors = res.rawColors != null;
      var colors = res.colors || {};
      if (alreadyHasRawColors) {
        outerThemeRawColors = _extends2({}, outerThemeRawColors);
        copyRawColors(colors, outerThemeRawColors);
        if (outerThemeRawColors.modes) {
          outerThemeRawColors.modes[initialColorModeName] = omitModes(outerThemeRawColors);
        }
        res.rawColors = outerThemeRawColors;
      } else {
        if (!("modes" in outerThemeRawColors)) {
          res.rawColors = colors;
        } else {
          var _extends22;
          var _modes = _extends2((_extends22 = {}, _extends22[initialColorModeName] = omitModes(outerThemeRawColors), _extends22), outerThemeRawColors.modes);
          res.rawColors = _extends2({}, colors, {
            modes: _modes
          });
        }
      }
      res.colors = toCustomProperties(omitModes(outerThemeRawColors), "colors");
    }
    return res;
  }, [colorMode, outerTheme]);
  return theme;
}
function GlobalColorStyles(_ref5) {
  var theme = _ref5.theme;
  return jsx2(Global, {
    styles: function styles() {
      return {
        html: __createColorStyles(theme)
      };
    }
  });
}
function NestedColorModeProvider(_ref6) {
  var _newTheme$config2;
  var outerCtx = _ref6.outerCtx, children = _ref6.children;
  var newTheme = useThemeWithAppliedColorMode({
    outerTheme: outerCtx.theme,
    colorMode: outerCtx.colorMode
  });
  var _useState2 = (0, import_react2.useState)(
    function() {
      var _newTheme$config;
      return ((_newTheme$config = newTheme.config) == null ? void 0 : _newTheme$config.useLocalStorage) !== false;
    }
  ), needsRerender = _useState2[0], setNeedsRerender = _useState2[1];
  useClientsideEffect(function() {
    return void setNeedsRerender(false);
  }, []);
  var themeColors = newTheme.rawColors || newTheme.colors;
  var useCustomProperties = (_newTheme$config2 = newTheme.config) == null ? void 0 : _newTheme$config2.useCustomProperties;
  var colorVars = (0, import_react2.useMemo)(function() {
    if (useCustomProperties === false) {
      return {};
    }
    var colors = themeColors || {};
    return css(__createColorProperties(colors, colors.modes || {}))(newTheme);
  }, [newTheme, themeColors, useCustomProperties]);
  return import_react2.default.createElement(__ThemeUIInternalBaseThemeProvider, {
    context: _extends2({}, outerCtx, {
      theme: newTheme
    })
  }, jsx2("div", {
    "data-themeui-nested-provider": true,
    key: Number(needsRerender),
    suppressHydrationWarning: true,
    css: colorVars,
    children
  }));
}
var ColorModeProvider = function ColorModeProvider2(_ref7) {
  var children = _ref7.children;
  var outerCtx = useThemeUI();
  var isTopLevelColorModeProvider = typeof outerCtx.setColorMode !== "function";
  return isTopLevelColorModeProvider ? import_react2.default.createElement(TopLevelColorModeProvider, {
    outerCtx
  }, children) : import_react2.default.createElement(NestedColorModeProvider, {
    outerCtx
  }, children);
};
var noflash = "(function() { try {\n  var mode = localStorage.getItem('theme-ui-color-mode');\n  if (!mode) return\n  document.documentElement.classList.add('theme-ui-' + mode);\n} catch (e) {} })();";
var InitializeColorMode = function InitializeColorMode2() {
  return jsx2("script", {
    key: "theme-ui-no-flash",
    dangerouslySetInnerHTML: {
      __html: noflash
    }
  });
};

// node_modules/@theme-ui/theme-provider/dist/theme-ui-theme-provider.esm.js
var import_react4 = __toESM(require_react());
var RootStyles = function RootStyles2() {
  return jsx2(Global, {
    styles: function styles(emotionTheme) {
      var _theme$config;
      var theme = emotionTheme;
      var _ref = theme.config || theme, useRootStyles = _ref.useRootStyles;
      if (useRootStyles === false || theme.styles && !theme.styles.root) {
        return null;
      }
      var boxSizing = ((_theme$config = theme.config) == null ? void 0 : _theme$config.useBorderBox) === false ? void 0 : "border-box";
      return css({
        "*": {
          boxSizing
        },
        html: {
          variant: "styles.root"
        },
        body: {
          margin: 0
        }
      })(theme);
    }
  });
};
var ThemeProvider2 = function ThemeProvider3(_ref2) {
  var theme = _ref2.theme, children = _ref2.children;
  var outer = useThemeUI();
  var isTopLevel = outer === __themeUiDefaultContextValue;
  return import_react4.default.createElement(ThemeProvider, {
    theme
  }, import_react4.default.createElement(ColorModeProvider, null, isTopLevel && import_react4.default.createElement(RootStyles, null), children));
};

// node_modules/theme-ui/dist/theme-ui.esm.js
function _extends3() {
  _extends3 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends3.apply(this, arguments);
}
var BaseStyles = function BaseStyles2(props) {
  return jsx4("div", _extends3({}, props, {
    sx: _extends3({
      fontFamily: "body",
      lineHeight: "body",
      fontWeight: "body",
      variant: "styles"
    }, props.sx)
  }));
};
var jsx4 = jsx2;
export {
  Alert,
  AspectImage,
  AspectRatio,
  Avatar,
  Badge,
  BaseStyles,
  Box$1 as Box,
  Button,
  Card,
  Checkbox,
  Close,
  CloseIcon,
  Container,
  Divider,
  Donut,
  Embed,
  Field,
  Flex,
  Grid,
  Heading,
  IconButton,
  Image,
  InitializeColorMode,
  Input,
  Label,
  Link,
  MenuButton,
  MenuIcon,
  Message,
  NavLink,
  Paragraph,
  Progress,
  Radio,
  Select,
  Slider,
  Spinner,
  Switch,
  Text,
  Textarea,
  ThemeProvider2 as ThemeProvider,
  __ThemeUIContext,
  __isBoxStyledSystemProp,
  createElement,
  css,
  get,
  jsx4 as jsx,
  merge,
  useColorMode,
  useThemeUI
};
//# sourceMappingURL=theme-ui.js.map
